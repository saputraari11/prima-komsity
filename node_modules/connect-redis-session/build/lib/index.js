"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisStore = void 0;
const session = __importStar(require("express-session"));
const adapter_1 = require("./adapter");
__exportStar(require("./adapter"), exports);
const noop = () => { };
class RedisStore extends session.Store {
    constructor(options) {
        var _a;
        super(options);
        this.access = new adapter_1.RedisStoreAdapter(options);
        this.disableTouch = (_a = options.disableTouch) !== null && _a !== void 0 ? _a : false;
    }
    get(sessionId, callback = noop) {
        this.access
            .get(sessionId)
            .then(result => callback(null, result))
            .catch(error => callback(error, null));
    }
    set(sessionId, sessionData, callback = noop) {
        this.access
            .set(sessionId, sessionData)
            .then(result => callback(null, result))
            .catch(error => callback(error, null));
    }
    touch(sessionId, sessionData, callback = noop) {
        if (this.disableTouch) {
            callback(null, null);
            return;
        }
        this.access
            .touch(sessionId, sessionData)
            .then(result => callback(null, result))
            .catch(error => callback(error, null));
    }
    destroy(sessionId, callback = noop) {
        this.access
            .destroy(sessionId)
            .then(result => callback(null, result))
            .catch(error => callback(error, false));
    }
    clear(callback = noop) {
        this.access
            .clear()
            .then(result => callback(null, result))
            .catch(error => callback(error, 0));
    }
    length(callback = noop) {
        this.access
            .length()
            .then(result => callback(null, result))
            .catch(error => callback(error, 0));
    }
    all(callback = noop) {
        this.access
            .all()
            .then(result => callback(null, result))
            .catch(error => callback(error, null));
    }
}
exports.RedisStore = RedisStore;
//# sourceMappingURL=index.js.map