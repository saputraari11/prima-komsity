"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __asyncDelegator = (this && this.__asyncDelegator) || function (o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
};
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisStoreAdapter = void 0;
const fs = __importStar(require("fs"));
const path = __importStar(require("path"));
const compare_1 = require("./compare");
const serializer_1 = __importDefault(require("./serializer"));
const TOMBSTONE = 'TOMBSTONE';
const loadLuaScript = (fileName) => {
    const filePath = path.resolve(__dirname, `../lua/${fileName}.lua`);
    const file = fs.readFileSync(filePath, 'utf8');
    return file.trim();
};
class RedisStoreAdapter {
    constructor(options) {
        var _a, _b, _c, _d, _e;
        if (!options.client) {
            throw new Error('Missing mandatory `client` option for `RedisStore`');
        }
        this.client = options.client;
        this.prefix = (_a = options.prefix) !== null && _a !== void 0 ? _a : 'sessions:';
        this.scanCount = (_b = options.scanCount) !== null && _b !== void 0 ? _b : 100;
        this.ttlSeconds = (_c = options.ttlSeconds) !== null && _c !== void 0 ? _c : 86400;
        this.concurrencyGraceSeconds = (_d = options.concurrencyGraceSeconds) !== null && _d !== void 0 ? _d : 300;
        this.serializer = (_e = options.serializer) !== null && _e !== void 0 ? _e : serializer_1.default;
        this._scripts = {
            set: loadLuaScript('set'),
            touch: loadLuaScript('touch'),
        };
    }
    key(sessionId) {
        return `${this.prefix}${sessionId}`;
    }
    checkTtlMilliseconds(sessionData) {
        var _a;
        if (((_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.cookie) === null || _a === void 0 ? void 0 : _a.expires) !== undefined) {
            return sessionData.cookie.expires.getTime() - Date.now();
        }
        return (this.ttlSeconds || 0) * 1000;
    }
    compare(sessionId, sessionData) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            const existing = yield this.get(sessionId);
            return {
                existing,
                concurrent: !!existing && ((_a = sessionData.lastModified) === null || _a === void 0 ? void 0 : _a.getTime()) !== ((_b = existing.lastModified) === null || _b === void 0 ? void 0 : _b.getTime()),
                consistent: !!existing &&
                    (0, compare_1.deepEqual)(Object.assign(Object.assign({}, sessionData), { lastModified: null, cookie: null }), Object.assign(Object.assign({}, existing), { lastModified: null, cookie: null })),
            };
        });
    }
    generateKeys(batch = true) {
        return __asyncGenerator(this, arguments, function* generateKeys_1() {
            let cursor = 0;
            do {
                const result = yield __await(this.client.scan(cursor, {
                    TYPE: 'string',
                    MATCH: this.key('*'),
                    COUNT: this.scanCount,
                }));
                cursor = result.cursor;
                const { keys } = result;
                if (keys.length) {
                    if (batch) {
                        yield yield __await(keys);
                    }
                    else {
                        yield __await(yield* __asyncDelegator(__asyncValues(keys)));
                    }
                }
            } while (cursor !== 0);
        });
    }
    get(sessionId) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = this.key(sessionId);
            const result = yield this.client.get(key);
            if (!result || result === TOMBSTONE)
                return null;
            return this.serializer.parse(result);
        });
    }
    set(sessionId, sessionData) {
        return __awaiter(this, void 0, void 0, function* () {
            const ttlMilliseconds = this.checkTtlMilliseconds(sessionData);
            if (ttlMilliseconds <= 0) {
                yield this.destroy(sessionId);
                return null;
            }
            const _sessionData = Object.assign(Object.assign({}, sessionData), { lastModified: new Date(Date.now()) });
            const key = this.key(sessionId);
            const value = this.serializer.stringify(_sessionData);
            const result = yield this.client.eval(this._scripts.set, {
                keys: [key],
                arguments: [value, String(ttlMilliseconds)],
            });
            if (!result)
                return null;
            return _sessionData;
        });
    }
    touch(sessionId, ttlSeconds) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = this.key(sessionId);
            const ttlMilliseconds = typeof ttlSeconds === 'number' ? ttlSeconds * 1000 : this.checkTtlMilliseconds(ttlSeconds);
            if (ttlMilliseconds <= 0) {
                yield this.destroy(sessionId);
                return null;
            }
            return this.client
                .eval(this._scripts.touch, {
                keys: [key],
                arguments: [String(ttlMilliseconds)],
            })
                .then(result => {
                if (result)
                    return new Date(ttlMilliseconds);
                return null;
            });
        });
    }
    destroy(sessionId, useTombstone = true) {
        return __awaiter(this, void 0, void 0, function* () {
            const key = this.key(sessionId);
            if (useTombstone) {
                return this.client
                    .set(key, TOMBSTONE, {
                    EX: this.concurrencyGraceSeconds,
                })
                    .then(result => !!result);
            }
            return this.client.del(key).then(result => result === 1);
        });
    }
    clear(useTombstones = true) {
        var e_1, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const generator = this.generateKeys();
            const batchPromises = [];
            try {
                for (var generator_1 = __asyncValues(generator), generator_1_1; generator_1_1 = yield generator_1.next(), !generator_1_1.done;) {
                    const keysBatch = generator_1_1.value;
                    if (useTombstones) {
                        const multi = this.client.multi();
                        keysBatch.forEach(key => {
                            multi.set(key, TOMBSTONE, {
                                EX: this.concurrencyGraceSeconds,
                            });
                        });
                        const batchPromise = multi.exec(true).then(results => results.filter(result => result !== null).length);
                        batchPromises.push(batchPromise);
                    }
                    else {
                        const batchPromise = this.client.del(keysBatch);
                        batchPromises.push(batchPromise);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (generator_1_1 && !generator_1_1.done && (_a = generator_1.return)) yield _a.call(generator_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return Promise.all(batchPromises).then(counts => counts.reduce((n, count) => n + count, 0));
        });
    }
    length(estimate = false) {
        var e_2, _a, e_3, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (estimate) {
                let n = 0;
                try {
                    for (var _c = __asyncValues(this.generateKeys(false)), _d; _d = yield _c.next(), !_d.done;) {
                        const _ = _d.value;
                        n += 1;
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_d && !_d.done && (_a = _c.return)) yield _a.call(_c);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                return n;
            }
            const batchPromises = [];
            try {
                for (var _e = __asyncValues(this.generateKeys()), _f; _f = yield _e.next(), !_f.done;) {
                    const keysBatch = _f.value;
                    const batchPromise = this.client.mGet(keysBatch).then(values => {
                        return values.filter(value => value && value !== TOMBSTONE).length;
                    });
                    batchPromises.push(batchPromise);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) yield _b.call(_e);
                }
                finally { if (e_3) throw e_3.error; }
            }
            return Promise.all(batchPromises).then(counts => counts.reduce((n, count) => n + count, 0));
        });
    }
    all() {
        var e_4, _a;
        return __awaiter(this, void 0, void 0, function* () {
            const generator = this.generateKeys();
            const batchPromises = [];
            try {
                for (var generator_2 = __asyncValues(generator), generator_2_1; generator_2_1 = yield generator_2.next(), !generator_2_1.done;) {
                    const keysBatch = generator_2_1.value;
                    const batchPromise = this.client.mGet(keysBatch).then(values => {
                        return values
                            .filter(value => value && value !== TOMBSTONE)
                            .reduce((acc, value, i) => {
                            const id = keysBatch[i].substring(this.prefix.length);
                            acc[id] = this.serializer.parse(value);
                            return acc;
                        }, {});
                    });
                    batchPromises.push(batchPromise);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (generator_2_1 && !generator_2_1.done && (_a = generator_2.return)) yield _a.call(generator_2);
                }
                finally { if (e_4) throw e_4.error; }
            }
            const batchResults = yield Promise.all(batchPromises);
            return Object.assign({}, ...batchResults);
        });
    }
}
exports.RedisStoreAdapter = RedisStoreAdapter;
//# sourceMappingURL=adapter.js.map