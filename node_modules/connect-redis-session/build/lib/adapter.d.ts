import * as session from 'express-session';
import type { createClient } from 'redis';
import { Serializer } from './serializer';
declare type Client = ReturnType<typeof createClient>;
export interface RedisStoreAdapterOptions {
    client: Client;
    prefix?: string;
    scanCount?: number;
    ttlSeconds?: number | false;
    concurrencyGraceSeconds?: number;
    serializer?: Serializer;
}
export interface SessionDataDict {
    [id: string]: session.SessionData;
}
export interface SessionComparison {
    existing: session.SessionData | null;
    concurrent: boolean;
    consistent: boolean;
}
export declare class RedisStoreAdapter {
    readonly client: Client;
    readonly prefix: string;
    readonly scanCount: number;
    readonly ttlSeconds: number | false;
    readonly concurrencyGraceSeconds: number;
    readonly serializer: Serializer;
    protected readonly _scripts: {
        set: string;
        touch: string;
    };
    constructor(options: RedisStoreAdapterOptions);
    key(sessionId: string): string;
    checkTtlMilliseconds(sessionData: session.SessionData): number;
    compare(sessionId: string, sessionData: Partial<session.SessionData>): Promise<SessionComparison>;
    generateKeys(batch: false): AsyncGenerator<string>;
    generateKeys(batch?: true): AsyncGenerator<string[]>;
    get(sessionId: string): Promise<session.SessionData | null>;
    set(sessionId: string, sessionData: session.SessionData): Promise<{
        lastModified: Date;
        cookie: session.Cookie;
    } | null>;
    touch(sessionId: string, ttlSeconds: session.SessionData | number): Promise<Date | null>;
    destroy(sessionId: string, useTombstone?: boolean): Promise<boolean>;
    clear(useTombstones?: boolean): Promise<number>;
    length(estimate?: boolean): Promise<number>;
    all(): Promise<SessionDataDict>;
}
export {};
