import * as session from 'express-session';
import { RedisStoreAdapter, RedisStoreAdapterOptions, SessionDataDict } from './adapter';
export * from './adapter';
declare module 'express-session' {
    interface SessionData {
        lastModified?: Date;
    }
}
export declare type Callback<TResult = unknown | null, TError = unknown | null> = (error: TError, result: TResult) => void;
export interface RedisStoreOptions extends RedisStoreAdapterOptions {
    disableTouch?: boolean;
    captureRejections?: boolean | undefined;
}
export declare class RedisStore extends session.Store {
    readonly access: RedisStoreAdapter;
    readonly disableTouch: boolean;
    constructor(options: RedisStoreOptions);
    get(sessionId: string, callback?: Callback<session.SessionData | null>): void;
    set(sessionId: string, sessionData: session.SessionData, callback?: Callback<session.SessionData | null>): void;
    touch(sessionId: string, sessionData: session.SessionData, callback?: Callback<Date | null>): void;
    destroy(sessionId: string, callback?: Callback<boolean>): void;
    clear(callback?: Callback<number>): void;
    length(callback?: Callback<number>): void;
    all(callback?: Callback<SessionDataDict | null>): void;
}
